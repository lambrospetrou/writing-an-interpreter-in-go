// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Demo$Reasonml = require("../src/Demo.bs.js");

Jest.describe("Token", (function (param) {
        return Jest.test("lookupIdentifier", (function (param) {
                      return Jest.Expect.toEqual(/* tuple */[
                                  /* FUNCTION */9,
                                  /* LET */10,
                                  /* IDENT */Block.__(1, ["random_identifier"])
                                ], Jest.Expect.expect(/* tuple */[
                                      Demo$Reasonml.Token.lookupIdentifier("fn"),
                                      Demo$Reasonml.Token.lookupIdentifier("let"),
                                      Demo$Reasonml.Token.lookupIdentifier("random_identifier")
                                    ]));
                    }));
      }));

Jest.describe("Lexer", (function (param) {
        return Jest.describe("nextToken", (function (param) {
                      var gatherTokens = function (input) {
                        var lexer = Demo$Reasonml.Lexer.make(/* String */[input]);
                        var chars = input.split("");
                        return chars.reduce((function (param, param$1) {
                                        var tokens = param[1];
                                        var match = Demo$Reasonml.Lexer.nextToken(param[0]);
                                        var token = match[1];
                                        var l = match[0];
                                        if (token === /* EOF */0) {
                                          return /* tuple */[
                                                  l,
                                                  tokens
                                                ];
                                        } else {
                                          return /* tuple */[
                                                  l,
                                                  $$Array.concat(/* :: */[
                                                        tokens,
                                                        /* :: */[
                                                          [token],
                                                          /* [] */0
                                                        ]
                                                      ])
                                                ];
                                        }
                                      }), /* tuple */[
                                      lexer,
                                      []
                                    ])[1];
                      };
                      Jest.test("simple", (function (param) {
                              return Jest.Expect.toEqual([
                                          /* ASSIGN */1,
                                          /* PLUS */2,
                                          /* LPAREN */5,
                                          /* RPAREN */6,
                                          /* LBRACE */7,
                                          /* RBRACE */8,
                                          /* COMMA */3,
                                          /* SEMICOLON */4,
                                          /* ILLEGAL */Block.__(0, ["|"])
                                        ], Jest.Expect.expect(gatherTokens("=+(){},;|")));
                            }));
                      return Jest.test("multi-line", (function (param) {
                                    return Jest.Expect.toEqual([
                                                /* LET */10,
                                                /* IDENT */Block.__(1, ["five"]),
                                                /* ASSIGN */1,
                                                /* INTEGER */Block.__(2, [5]),
                                                /* SEMICOLON */4,
                                                /* LET */10,
                                                /* IDENT */Block.__(1, ["ten"]),
                                                /* ASSIGN */1,
                                                /* INTEGER */Block.__(2, [10]),
                                                /* SEMICOLON */4,
                                                /* LET */10,
                                                /* IDENT */Block.__(1, ["add"]),
                                                /* ASSIGN */1,
                                                /* FUNCTION */9,
                                                /* LPAREN */5,
                                                /* IDENT */Block.__(1, ["x"]),
                                                /* COMMA */3,
                                                /* IDENT */Block.__(1, ["y"]),
                                                /* RPAREN */6,
                                                /* LBRACE */7,
                                                /* IDENT */Block.__(1, ["x"]),
                                                /* PLUS */2,
                                                /* IDENT */Block.__(1, ["y"]),
                                                /* SEMICOLON */4,
                                                /* RBRACE */8,
                                                /* SEMICOLON */4,
                                                /* LET */10,
                                                /* IDENT */Block.__(1, ["result"]),
                                                /* ASSIGN */1,
                                                /* IDENT */Block.__(1, ["add"]),
                                                /* LPAREN */5,
                                                /* IDENT */Block.__(1, ["five"]),
                                                /* COMMA */3,
                                                /* IDENT */Block.__(1, ["ten"]),
                                                /* RPAREN */6,
                                                /* SEMICOLON */4
                                              ], Jest.Expect.expect(gatherTokens("\r\n        let five = 5;\r\n        let ten = 10;\r\n\r\n        let add = fn   (x, y) {\r\n          x + y;\r\n        };\r\n\r\n        let result = add(five, ten);")));
                                  }));
                    }));
      }));

/*  Not a pure module */
